--lua string库 -- http://www.jb51.net/article/57613.htm
--[[
Lua解释器对字符串的支持很有限: 一个程序可以创建字符串并连接字符串, 
但不能截取子串, 检查字符串的大小, 检测字符串的内容, 在Lua中操纵字符串的功能基本来自于string库

*1.string.len(s)  返回字符串s的长度


*2.string.rep(s, n)  返回重复n次的字符串, 
例如: 你使用string.rep("a", 2^20)可以创建一个1M bytes的字符串（比如，为了测试需要）


*3.string.lower(s)  将s中的大写字母转换成小写（string.upper将小写转换成大写）
如果你想不关心大小写对一个数组进行排序的话，你可以这样：
table.sort(a, function (a, b) return string.lower(a) < string.lower(b) end)


*4.string.upper(s)  将s中的小写字母转换成大写


*5.string.sub(s,i,j)  函数截取字符串s的从第i个字符到第j个字符之间的所有字符
Lua中字符串的第一个字符索引从1开始, 你也可以使用负索引, 负索引从字符串的结尾向前计数：
-1指向最后一个字符, -2指向倒数第二个, 以此类推
string.sub(s, 1, j)返回字符串s的长度为j的前缀
string.sub(s, j, -1)返回从第j个字符开始的后缀
如果不提供第3个参数，默认为-1
因此我们将最后一个调用写为string.sub(s, j)
string.sub(s, 2, -2)返回去除第一个和最后一个字符后的子串

记住：Lua中的字符串是恒定不变的. string.sub函数以及Lua中其他的字符串操作函数都不会改变字符串的值
而是返回一个新的字符串


*6.string.char函数和string.byte函数
用来将字符在字符和数字之间转换...
string.char获取0个或多个整数, 将每一个数字转换成字符, 然后返回一个所有这些字符连接起来的字符串
string.byte(s, i)将字符串s的第i个字符的转换成整数, 第二个参数是可选的，缺省情况下i=1
print(string.char(97)) --> a
i = 99; print(string.char(i, i+1, i+2)) --> cde
print(string.byte("abc")) --> 97
print(string.byte("abc", 2)) --> 98
print(string.byte("abc", -1)) --> 99 


*7.Lua提供了string.format()函数来生成具有特定格式的字符串
%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符
%d, %i - 接受一个数字并将其转化为有符号的整数格式
%o - 接受一个数字并将其转化为八进制数格式
%u - 接受一个数字并将其转化为无符号整数格式
%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母
%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母
%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e
%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E
%f - 接受一个数字并将其转化为浮点数格式
%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式
%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式
%s - 接受一个字符串并按照给定的参数格式化该字符串






]]