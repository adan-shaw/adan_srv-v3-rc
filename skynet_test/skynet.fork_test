local skynet = require "skynet"
local sprotoloader = require "sprotoloader"

local max_client = 4096

skynet.start(function()
  --验证skynet.fork 只是一个协程
  --skynet 里面没有独立线程, 独立线程会阻碍skynet 的核心层控制
    print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))  
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  skynet.fork(function()
    print("inside",collectgarbage("count"))
    for i=1,1000000 do
      skynet.sleep(100)
    end
  end)
  print(collectgarbage("count"))
  --
  --
	skynet.error("Server start")
	skynet.uniqueservice("protoloader")
	if not skynet.getenv "daemon" then
		local console = skynet.newservice("console")
	end
	skynet.newservice("debug_console",11114)
	skynet.newservice("simpledb")
	local watchdog = skynet.newservice("watchdog")
	skynet.call(watchdog, "lua", "start", {
		port = 11113,
		maxclient = max_client,
		nodelay = true,
	})
	skynet.error("Watchdog listen on", 11113)
	skynet.exit()
end)
